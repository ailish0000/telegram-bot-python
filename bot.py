# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω—É–∂–Ω—ã–µ –º–æ–¥—É–ª–∏ –∏–∑ aiogram
import os
import asyncio
import random
from dotenv import load_dotenv

try:
    import ssl
    SSL_AVAILABLE = True
except ImportError:
    SSL_AVAILABLE = False
    print("‚ö†Ô∏è –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ SSL –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ë–æ—Ç –Ω–µ —Å–º–æ–∂–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å HTTPS-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.")

if SSL_AVAILABLE:
    from aiogram import Bot, Dispatcher, executor, types
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

    load_dotenv()

    BOT_TOKEN = os.getenv("BOT_TOKEN")
    ADMIN_ID = int(os.getenv("ADMIN_ID"))

    bot = Bot(token=BOT_TOKEN)
    dp = Dispatcher(bot)

    # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    WELCOME_IMAGE = "https://github.com/user-attachments/assets/474d0575-01ed-45cc-8253-5e35bccda672"
    MENU_IMAGE = "https://github.com/user-attachments/assets/832593ee-2617-4ef6-9656-ff4d4f9506b8"

    # –î–∞–Ω–Ω—ã–µ
    user_started = set()
    user_messages = []
    waiting_for_question = set()
    waiting_for_error = set()

    # –ú–µ–Ω—é
    def main_menu():
        markup = InlineKeyboardMarkup(row_width=1)
        markup.add(
            InlineKeyboardButton("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è üíö", url="https://aur-ora.com/auth/registration/666282189484"),
            InlineKeyboardButton("1‚É£ –ü–æ–¥–±–æ—Ä–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤", callback_data="select_product"),
            InlineKeyboardButton("2‚É£ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="ask_question"),
            InlineKeyboardButton("3‚É£ –ö–∞—Ç–∞–ª–æ–≥ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤", callback_data="catalog"),
            InlineKeyboardButton("4‚É£ –ê–¥—Ä–µ—Å–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤", callback_data="check_city"),
            InlineKeyboardButton("–°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ ‚ùå", callback_data="report_error")
        )
        return markup

    def admin_menu():
        markup = InlineKeyboardMarkup(row_width=1)
        markup.add(
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
            InlineKeyboardButton("üí¨ –û–±—Ä–∞—â–µ–Ω–∏—è", callback_data="admin_messages"),
            InlineKeyboardButton("üì¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="admin_broadcast")
        )
        return markup

    def product_menu():
        markup = InlineKeyboardMarkup(row_width=2)
        markup.add(
            InlineKeyboardButton("–û—Ç –ø—Ä–æ—Å—Ç—É–¥—ã", callback_data="prostuda"),
            InlineKeyboardButton("–í–æ–ª–æ—Å—ã/–Ω–æ–≥—Ç–∏", callback_data="hair"),
            InlineKeyboardButton("–î–ª—è —Å—É—Å—Ç–∞–≤–æ–≤", callback_data="joints"),
            InlineKeyboardButton("–î–ª—è –ø–µ—á–µ–Ω–∏", callback_data="liver"),
            InlineKeyboardButton("–í–∏—Ç–∞–º–∏–Ω—ã", callback_data="vitamins"),
            InlineKeyboardButton("–ê–Ω—Ç–∏–ø–∞—Ä–∞–∑–∏—Ç–∞—Ä–∫–∞", callback_data="antiparazit"),
            InlineKeyboardButton("–°–æ—Ä–±–µ–Ω—Ç—ã", callback_data="sorbent"),
            InlineKeyboardButton("–õ–∏—á–Ω—ã–π —Ç–æ–ø", callback_data="top"),
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
        )
        return markup

    def city_menu():
        cities = [
            ("–ú–∏–Ω—Å–∫", "Minsk"), ("–ú–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "Minsk_region"),
            ("–ì–æ–º–µ–ª—å", "Gomel"), ("–ì–æ–º–µ–ª—å—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "Gomel_region"),
            ("–ë—Ä–µ—Å—Ç", "Brest"), ("–ë—Ä–µ—Å—Ç—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "Brest_region"),
            ("–í–∏—Ç–µ–±—Å–∫", "Vitebsk"), ("–í–∏—Ç–µ–±—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "Vitebsk_region"),
            ("–ú–æ–≥–∏–ª–µ–≤", "Mogilev"), ("–ú–æ–≥–∏–ª–µ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "Mogilev_region"),
            ("–ù–µ—Ç –º–æ–µ–≥–æ –≥–æ—Ä–æ–¥–∞", "none_city")
        ]
        markup = InlineKeyboardMarkup(row_width=1)
        for name, data in cities:
            markup.add(InlineKeyboardButton(name, callback_data=data))
        markup.add(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main"))
        return markup

    async def delete_message_safe(chat_id, message_id):
        try:
            await bot.delete_message(chat_id, message_id)
        except:
            pass

    async def thanos_effect(chat_id):
        """
        –£–¥–∞–ª—è–µ—Ç –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ, —Å–æ–∑–¥–∞–≤–∞—è —ç—Ñ—Ñ–µ–∫—Ç –¢–∞–Ω–æ—Å–∞.
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ (–¥–æ 100 —Å–æ–æ–±—â–µ–Ω–∏–π)
            async for msg in bot.iter_history(chat_id, limit=100):
                try:
                    # –£–¥–∞–ª—è–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await bot.delete_message(chat_id, msg.message_id)
                except:
                    continue
        except Exception as e:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏
            pass

    @dp.message_handler(commands=["start", "menu"])
    async def send_start(message: types.Message):
        user_id = message.from_user.id
        user_started.add(user_id)
        await bot.send_photo(
            chat_id=user_id,
            photo=WELCOME_IMAGE,
            caption="–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ù–∞—Ç–∞–ª—å—è –ö—É–º–∞—Å–∏–Ω—Å–∫–∞—è. –Ø –º–∞–º–∞ –¥–≤–æ–∏—Ö —Å—ã–Ω–æ–≤–µ–π –∏ –¥–∞–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑—É—é –ø—Ä–æ–¥—É–∫—Ü–∏—é –ê–≤—Ä–æ—Ä—ã. –•–æ—á—É –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –æ–ø—ã—Ç–æ–º –∏ –ø–æ–º–æ—á—å –≤—ã–±—Ä–∞—Ç—å —Ö–æ—Ä–æ—à–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã —ç—Ç–æ–π —Ñ–∏—Ä–º—ã"
        )
        await asyncio.sleep(6)
        await delete_message_safe(user_id, message.message_id)
        await thanos_effect(user_id)
        await bot.send_photo(
            chat_id=user_id,
            photo=MENU_IMAGE,
            caption="–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±–µ –ø–æ–¥—Ö–æ–¥–∏—Ç üëá",
            reply_markup=main_menu()
        )

    @dp.callback_query_handler()
    async def handle_callbacks(callback_query: types.CallbackQuery):
        data = callback_query.data
        user_id = callback_query.from_user.id

        await thanos_effect(user_id)

        if data == "select_product":
            await bot.send_photo(chat_id=user_id, photo=MENU_IMAGE, caption="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–æ–¥—É–∫—Ç–∞:", reply_markup=product_menu())

        elif data == "prostuda":
            markup = InlineKeyboardMarkup(row_width=1)
            markup.add(InlineKeyboardButton("–ß–∏—Ç–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ", url="https://aur-ora.com/catalog/zdorove/543/"))
            markup.row(
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="select_product"),
                InlineKeyboardButton("–î–∞–ª—å—à–µ ‚ñ∂Ô∏è", callback_data="prostuda_2")
            )
            await bot.send_photo(
                chat_id=user_id,
                photo="https://github.com/user-attachments/assets/ac7b0dcc-2786-4c3e-b2bb-49e2d5c5af64",
                caption="1Ô∏è‚É£ –ê–Ω—Ç–∏–æ–∫—Å–∏–¥–∞–Ω—Ç –∏–∑ —Å–æ–∫–∞ –æ–±–ª–µ–ø–∏—Ö–∏.",
                reply_markup=markup
            )

        elif data == "prostuda_2":
            markup = InlineKeyboardMarkup(row_width=1)
            markup.add(InlineKeyboardButton("–ß–∏—Ç–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ", url="https://aur-ora.com/catalog/zdorove/641/"))
            markup.row(
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="prostuda"),
                InlineKeyboardButton("–î–∞–ª—å—à–µ ‚ñ∂Ô∏è", callback_data="prostuda_3")
            )
            await bot.send_photo(
                chat_id=user_id,
                photo="https://github.com/user-attachments/assets/2becd1b4-cb70-42d1-8052-c12d2a750fa1",
                caption="2Ô∏è‚É£ –°–æ–∫ —Å–≤–µ–∫–ª—ã.",
                reply_markup=markup
            )

        elif data == "prostuda_3":
            markup = InlineKeyboardMarkup(row_width=1)
            markup.add(InlineKeyboardButton("–ß–∏—Ç–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ", url="https://aur-ora.com/catalog/zdorove/447/"))
            markup.row(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="prostuda_2"))
            await bot.send_photo(
                chat_id=user_id,
                photo="https://github.com/user-attachments/assets/df53f6da-2cdd-4d75-b20e-0206c3252456",
                caption="3Ô∏è‚É£ –ö–æ–ª–ª–æ–∏–¥–Ω–æ–µ —Å–µ—Ä–µ–±—Ä–æ.",
                reply_markup=markup
            )

        await bot.answer_callback_query(callback_query.id)

    if __name__ == "__main__":
        executor.start_polling(dp, skip_updates=True)
else:
    print("‚ùå –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω –±–µ–∑ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ SSL. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ä–µ–¥—É —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π HTTPS.")
