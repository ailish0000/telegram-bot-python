# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω—É–∂–Ω—ã–µ –º–æ–¥—É–ª–∏ –∏–∑ aiogram
import os
from dotenv import load_dotenv  # –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É SSL (–≤–∞–∂–Ω–æ –¥–ª—è aiogram)
try:
    import ssl
    SSL_AVAILABLE = True
except ImportError:
    SSL_AVAILABLE = False
    print("‚ö†Ô∏è –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ SSL –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ë–æ—Ç –Ω–µ —Å–º–æ–∂–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å HTTPS-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.")

if SSL_AVAILABLE:
    from aiogram import Bot, Dispatcher, executor, types
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
    load_dotenv()

    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    BOT_TOKEN = os.getenv("BOT_TOKEN")
    ADMIN_ID = int(os.getenv("ADMIN_ID"))  # –í–∞–∂–Ω–æ: –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º

    # –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    bot = Bot(token=BOT_TOKEN)
    dp = Dispatcher(bot)

    # –§—É–Ω–∫—Ü–∏—è, —Å–æ–∑–¥–∞—é—â–∞—è –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (inline-–∫–Ω–æ–ø–∫–∏)
    def main_menu():
        markup = InlineKeyboardMarkup(row_width=1)
        markup.add(
           InlineKeyboardButton("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è üíö", url="https://aur-ora.com/auth/registration/666282189484"),
            InlineKeyboardButton("1Ô∏è‚É£ –ü–æ–¥–±–æ—Ä–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤", callback_data="select_product"),
            InlineKeyboardButton("2Ô∏è‚É£ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="ask_question"),
            InlineKeyboardButton("3Ô∏è‚É£ –ö–∞—Ç–∞–ª–æ–≥ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤", callback_data="catalog"),
            InlineKeyboardButton("4Ô∏è‚É£ –ê–¥—Ä–µ—Å–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤", callback_data="check_city"),
            InlineKeyboardButton("–°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ ‚ùå", callback_data="report_error")
        )
        return markup

    # –§—É–Ω–∫—Ü–∏—è, —Å–æ–∑–¥–∞—é—â–∞—è –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
    def product_menu():
        markup = InlineKeyboardMarkup(row_width=2)
        markup.add(
            InlineKeyboardButton("–î–ª—è –≤–æ–ª–æ—Å", callback_data="hair"),
            InlineKeyboardButton("–î–ª—è —Å—É—Å—Ç–∞–≤–æ–≤", callback_data="joints"),
            InlineKeyboardButton("–î–ª—è –ø–µ—á–µ–Ω–∏", callback_data="liver"),
            InlineKeyboardButton("–í–∏—Ç–∞–º–∏–Ω—ã", callback_data="vitamins"),
            InlineKeyboardButton("–°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ ‚ùå", callback_data="report_error")
        )
        return markup

    # –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
    def city_menu():
        markup = InlineKeyboardMarkup(row_width=1)
        markup.add(
            InlineKeyboardButton("–ú–∏–Ω—Å–∫", callback_data="Minsk"),
            InlineKeyboardButton("–ì–æ–º–µ–ª—å", callback_data="Gomel"),
            InlineKeyboardButton("–ë—Ä–µ—Å—Ç", callback_data="Brest"),
            InlineKeyboardButton("–í–∏—Ç–µ–±—Å–∫", callback_data="Vitebsk"),
            InlineKeyboardButton("–ú–æ–≥–∏–ª–µ–≤", callback_data="Mogilev"),
            InlineKeyboardButton("–ù–µ—Ç –º–æ–µ–≥–æ –≥–æ—Ä–æ–¥–∞", callback_data="none_city"),
            InlineKeyboardButton("–°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ ‚ùå", callback_data="report_error")
        )
        return markup

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –∏ /menu
    @dp.message_handler(commands=["start", "menu"])
    async def send_welcome(message: types.Message):
        await message.answer("–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±–µ –ø–æ–¥—Ö–æ–¥–∏—Ç üëá", reply_markup=main_menu())

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /registration
    @dp.message_handler(commands=["registration"])
    async def send_registration_link(message: types.Message):
        await message.answer("–°—Å—ã–ª–∫–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: https://aur-ora.com/auth/registration/666282189484")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /catalog
    @dp.message_handler(commands=["catalog"])
    async def send_catalog_link(message: types.Message):
        await message.answer("–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ç–∞–ª–æ–≥: https://aur-ora.com/catalog/vse_produkty/")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏
    @dp.callback_query_handler(lambda c: True)
    async def handle_callback(callback_query: types.CallbackQuery):
        data = callback_query.data
        user_id = callback_query.from_user.id

        if data == "check_address":
            await bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≥–æ—Ä–æ–¥:")

        elif data == "select_product":
            await bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–æ–¥—É–∫—Ç–∞:", reply_markup=product_menu())

        elif data == "ask_question":
            await bot.send_message(user_id, "‚úâÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç, –∏ —è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—á—É.")

        elif data == "check_city":
            await bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=city_menu())

        elif data == "Minsk":
            await bot.send_message(user_id, "üìç –ú–∏–Ω—Å–∫: –ø—Ä-—Ç –ù–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, 123. –¢–µ–ª: +375 29 000 0000")
        elif data == "Gomel":
            await bot.send_message(user_id, "üìç –ì–æ–º–µ–ª—å: —É–ª. –°–æ–≤–µ—Ç—Å–∫–∞—è, 45. –¢–µ–ª: +375 29 111 1111")
        elif data == "Brest":
            await bot.send_message(user_id, "üìç –ë—Ä–µ—Å—Ç: —É–ª. –õ–µ–Ω–∏–Ω–∞, 10. –¢–µ–ª: +375 29 222 2222")
        elif data == "Vitebsk":
            await bot.send_message(user_id, "üìç –í–∏—Ç–µ–±—Å–∫: —É–ª. –ß–∫–∞–ª–æ–≤–∞, 15. –¢–µ–ª: +375 29 333 3333")
        elif data == "Mogilev":
            await bot.send_message(user_id, "üìç –ú–æ–≥–∏–ª–µ–≤: –ø—Ä-—Ç –ú–∏—Ä–∞, 7. –¢–µ–ª: +375 29 444 4444")

        elif data == "report_error":
            await bot.send_message(user_id, "‚ö†Ô∏è –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± –æ—à–∏–±–∫–µ, —á—Ç–æ–±—ã —è –º–æ–≥–ª–∞ –µ—ë –∏—Å–ø—Ä–∞–≤–∏—Ç—å.")

        elif data in ["hair", "joints", "liver", "vitamins"]:
            await bot.send_message(user_id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {data}")

        await bot.answer_callback_query(callback_query.id)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–µ –∫–æ–º–∞–Ω–¥)
    @dp.message_handler(lambda message: message.text and not message.text.startswith("/"))
    async def forward_user_message(message: types.Message):
        await bot.send_message(
            ADMIN_ID,
            f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{message.from_user.username or '–±–µ–∑ username'} (ID: {message.from_user.id}):\n\n{message.text}"
        )
        await message.reply("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    if __name__ == "__main__":
        executor.start_polling(dp, skip_updates=True)
else:
    print("‚ùå –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω –±–µ–∑ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ SSL. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ä–µ–¥—É —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π HTTPS.")



