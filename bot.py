# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω—É–∂–Ω—ã–µ –º–æ–¥—É–ª–∏ –∏–∑ aiogram
import os
import asyncio
from dotenv import load_dotenv  # –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env

try:
    import ssl
    SSL_AVAILABLE = True
except ImportError:
    SSL_AVAILABLE = False
    print("‚ö†Ô∏è –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ SSL –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ë–æ—Ç –Ω–µ —Å–º–æ–∂–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å HTTPS-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.")

if SSL_AVAILABLE:
    from aiogram import Bot, Dispatcher, executor, types
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

    load_dotenv()

    BOT_TOKEN = os.getenv("BOT_TOKEN")
    ADMIN_ID = int(os.getenv("ADMIN_ID"))

    bot = Bot(token=BOT_TOKEN)
    dp = Dispatcher(bot)

    WELCOME_IMAGE = "https://github.com/user-attachments/assets/474d0575-01ed-45cc-8253-5e35bccda672"
    MENU_IMAGE = "https://github.com/user-attachments/assets/832593ee-2617-4ef6-9656-ff4d4f9506b8"

    user_started = set()

    def main_menu():
        markup = InlineKeyboardMarkup(row_width=1)
        markup.add(
            InlineKeyboardButton("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è üíö", url="https://aur-ora.com/auth/registration/666282189484"),
            InlineKeyboardButton("1Ô∏è‚É£ –ü–æ–¥–±–æ—Ä–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤", callback_data="select_product"),
            InlineKeyboardButton("2Ô∏è‚É£ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="ask_question"),
            InlineKeyboardButton("3Ô∏è‚É£ –ö–∞—Ç–∞–ª–æ–≥ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤", callback_data="catalog"),
            InlineKeyboardButton("4Ô∏è‚É£ –ê–¥—Ä–µ—Å–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤", callback_data="check_city"),
            InlineKeyboardButton("–°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ ‚ùå", callback_data="report_error")
        )
        return markup

    def product_menu():
        markup = InlineKeyboardMarkup(row_width=2)
        markup.add(
            InlineKeyboardButton("–û—Ç –ø—Ä–æ—Å—Ç—É–¥—ã", callback_data="prostuda_1"),
            InlineKeyboardButton("–í–æ–ª–æ—Å—ã/–Ω–æ–≥—Ç–∏", callback_data="hair"),
            InlineKeyboardButton("–î–ª—è —Å—É—Å—Ç–∞–≤–æ–≤", callback_data="joints"),
            InlineKeyboardButton("–î–ª—è –ø–µ—á–µ–Ω–∏", callback_data="liver"),
            InlineKeyboardButton("–í–∏—Ç–∞–º–∏–Ω—ã", callback_data="vitamins"),
            InlineKeyboardButton("–ê–Ω—Ç–∏–ø–∞—Ä–∞–∑–∏—Ç–∞—Ä–∫–∞", callback_data="antiparazit"),
            InlineKeyboardButton("–°–æ—Ä–±–µ–Ω—Ç—ã", callback_data="sorbent"),
            InlineKeyboardButton("–õ–∏—á–Ω—ã–π —Ç–æ–ø", callback_data="top"),
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
        )
        return markup

    def city_menu():
        markup = InlineKeyboardMarkup(row_width=1)
        markup.add(
            InlineKeyboardButton("–ú–∏–Ω—Å–∫", callback_data="Minsk"),
            InlineKeyboardButton("–ú–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", callback_data="Minsk_region"),
            InlineKeyboardButton("–ì–æ–º–µ–ª—å", callback_data="Gomel"),
            InlineKeyboardButton("–ì–æ–º–µ–ª—å—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", callback_data="Gomel_region"),
            InlineKeyboardButton("–ë—Ä–µ—Å—Ç", callback_data="Brest"),
            InlineKeyboardButton("–ë—Ä–µ—Å—Ç—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", callback_data="Brest_region"),
            InlineKeyboardButton("–í–∏—Ç–µ–±—Å–∫", callback_data="Vitebsk"),
            InlineKeyboardButton("–í–∏—Ç–µ–±—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", callback_data="Vitebsk_region"),
            InlineKeyboardButton("–ú–æ–≥–∏–ª–µ–≤", callback_data="Mogilev"),
            InlineKeyboardButton("–ú–æ–≥–∏–ª–µ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", callback_data="Mogilev_region"),
            InlineKeyboardButton("–ù–µ—Ç –º–æ–µ–≥–æ –≥–æ—Ä–æ–¥–∞", callback_data="none_city"),
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
        )
        return markup

    async def delete_message_safe(chat_id, message_id):
        try:
            await bot.delete_message(chat_id, message_id)
        except:
            pass

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    @dp.message_handler(commands=["start"])
    async def send_start(message: types.Message):
        user_id = message.from_user.id
        if user_id not in user_started:
            user_started.add(user_id)
            await bot.send_photo(
                chat_id=user_id,
                photo=WELCOME_IMAGE,
                caption="–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ù–∞—Ç–∞–ª—å—è –ö—É–º–∞—Å–∏–Ω—Å–∫–∞—è. –Ø –º–∞–º–∞ –¥–≤–æ–∏—Ö —Å—ã–Ω–æ–≤–µ–π –∏ –¥–∞–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑—É—é –ø—Ä–æ–¥—É–∫—Ü–∏—é –ê–≤—Ä–æ—Ä—ã. –•–æ—á—É –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –æ–ø—ã—Ç–æ–º –∏ –ø–æ–º–æ—á—å –≤—ã–±—Ä–∞—Ç—å —Ö–æ—Ä–æ—à–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã —ç—Ç–æ–π —Ñ–∏—Ä–º—ã"
            )
            await asyncio.sleep(6)
        await delete_message_safe(user_id, message.message_id)
        await bot.send_photo(
            chat_id=user_id,
            photo=MENU_IMAGE,
            caption="–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±–µ –ø–æ–¥—Ö–æ–¥–∏—Ç üëá",
            reply_markup=main_menu()
        )

    # –ú–µ–Ω—é —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º –¢–∞–Ω–æ—Å–∞
    @dp.message_handler(commands=["menu"])
    async def send_menu(message: types.Message):
        user_id = message.from_user.id
        await delete_message_safe(user_id, message.message_id)
        await bot.send_photo(
            chat_id=user_id,
            photo=MENU_IMAGE,
            caption="–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±–µ –ø–æ–¥—Ö–æ–¥–∏—Ç üëá",
            reply_markup=main_menu()
        )

    @dp.message_handler(commands=["registration"])
    async def send_registration_link(message: types.Message):
        user_id = message.from_user.id
        await delete_message_safe(user_id, message.message_id)
        await message.answer("–°—Å—ã–ª–∫–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: https://aur-ora.com/auth/registration/666282189484")

    @dp.message_handler(commands=["catalog"])
    async def send_catalog_link(message: types.Message):
        user_id = message.from_user.id
        await delete_message_safe(user_id, message.message_id)
        await message.answer("–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ç–∞–ª–æ–≥: https://aur-ora.com/catalog/vse_produkty")

    @dp.callback_query_handler(lambda c: True)
    async def handle_callback(callback_query: types.CallbackQuery):
        data = callback_query.data
        user_id = callback_query.from_user.id
        message_id = callback_query.message.message_id

        await delete_message_safe(user_id, message_id)

        if data == "select_product":
            await bot.send_photo(
                chat_id=user_id,
                photo=MENU_IMAGE,
                caption="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–æ–¥—É–∫—Ç–∞:",
                reply_markup=product_menu()
            )

        elif data == "ask_question":
            await bot.send_message(user_id, "‚úâÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç, –∏ —è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—á—É.")

        elif data == "check_city":
            await bot.send_photo(
                chat_id=user_id,
                photo=MENU_IMAGE,
                caption="–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:",
                reply_markup=city_menu()
            )

        elif data == "back_to_main":
            await bot.send_photo(
                chat_id=user_id,
                photo=MENU_IMAGE,
                caption="–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±–µ –ø–æ–¥—Ö–æ–¥–∏—Ç üëá",
                reply_markup=main_menu()
            )

        elif data == "Minsk":
            await bot.send_message(user_id, "üìç –ú–∏–Ω—Å–∫: –ø—Ä-—Ç –ù–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, 123. –¢–µ–ª: +375 29 000 0000")
        elif data == "Gomel":
            await bot.send_message(user_id, "üìç –ì–æ–º–µ–ª—å: —É–ª. –°–æ–≤–µ—Ç—Å–∫–∞—è, 45. –¢–µ–ª: +375 29 111 1111")
        elif data == "Brest":
            await bot.send_message(user_id, "üìç –ë—Ä–µ—Å—Ç: —É–ª. –õ–µ–Ω–∏–Ω–∞, 10. –¢–µ–ª: +375 29 222 2222")
        elif data == "Vitebsk":
            await bot.send_message(user_id, "üìç –í–∏—Ç–µ–±—Å–∫: —É–ª. –ß–∫–∞–ª–æ–≤–∞, 15. –¢–µ–ª: +375 29 333 3333")
        elif data == "Mogilev":
            await bot.send_message(user_id, "üìç –ú–æ–≥–∏–ª–µ–≤: –ø—Ä-—Ç –ú–∏—Ä–∞, 7. –¢–µ–ª: +375 29 444 4444")

        elif data == "report_error":
            await bot.send_message(user_id, "‚ö†Ô∏è –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± –æ—à–∏–±–∫–µ, —á—Ç–æ–±—ã —è –º–æ–≥–ª–∞ –µ—ë –∏—Å–ø—Ä–∞–≤–∏—Ç—å.")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ "–û—Ç –ø—Ä–æ—Å—Ç—É–¥—ã" —Å –ª–∏—Å—Ç–∞–Ω–∏–µ–º
        elif data.startswith("prostuda"):
            # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–º–µ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞
            parts = data.split("_")
            step = parts[1] if len(parts) > 1 else "1"

            if step == "1":
                markup = InlineKeyboardMarkup(row_width=1)
                markup.add(
                    InlineKeyboardButton("–ß–∏—Ç–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ", url="https://aur-ora.com/catalog/zdorove/543/"),
                    InlineKeyboardButton("–î–∞–ª—å—à–µ ‚ñ∂Ô∏è", callback_data="prostuda_2"),
                    InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="select_product")
                )
                await bot.send_photo(
                    chat_id=user_id,
                    photo="https://github.com/user-attachments/assets/ac7b0dcc-2786-4c3e-b2bb-49e2d5c5af64",
                    caption="1Ô∏è‚É£ –ê–Ω—Ç–∏–æ–∫—Å–∏–¥–∞–Ω—Ç –∏–∑ —Å–æ–∫–∞ –æ–±–ª–µ–ø–∏—Ö–∏. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–º–µ—Å—Ç–µ —Å —Å–æ–∫–æ–º —Å–≤–µ–∫–ª—ã –∏ —Å–µ—Ä–µ–±—Ä–æ–º",
                    reply_markup=markup
                )

            elif step == "2":
                markup = InlineKeyboardMarkup(row_width=1)
                markup.add(
                    InlineKeyboardButton("–ß–∏—Ç–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ", url="https://aur-ora.com/catalog/zdorove/641/"),
                    InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="prostuda_1"),
                    InlineKeyboardButton("–î–∞–ª—å—à–µ ‚ñ∂Ô∏è", callback_data="prostuda_3")  # –ï—Å–ª–∏ –±—É–¥–µ—Ç 3-–π –ø—Ä–æ–¥—É–∫—Ç, –º–æ–∂–Ω–æ –ø–æ—Ç–æ–º –ø–æ–ø—Ä–∞–≤–∏—Ç—å
                )
                await bot.send_photo(
                    chat_id=user_id,
                    photo="https://github.com/user-attachments/assets/2becd1b4-cb70-42d1-8052-c12d2a750fa1",
                    caption="2Ô∏è‚É£ –ê–Ω—Ç–∏–æ–∫—Å–∏–¥–∞–Ω—Ç –∏–∑ —Å–æ–∫–∞ —Å–≤–µ–∫–ª—ã. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–æ–≤–º–µ—Å—Ç–Ω–æ —Å –æ–±–ª–µ–ø–∏—Ö–æ–π –∏ —Å–µ—Ä–µ–±—Ä–æ–º",
                    reply_markup=markup
                )

            elif step == "3":
                # –ó–¥–µ—Å—å –ø—Ä–∏–º–µ—Ä —Ç—Ä–µ—Ç—å–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞, –µ—Å–ª–∏ –µ–≥–æ –ø–æ–∫–∞ –Ω–µ—Ç, –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –∏–ª–∏ —É–±—Ä–∞—Ç—å
                markup = InlineKeyboardMarkup(row_width=1)
                markup.add(
                    InlineKeyboardButton("–ß–∏—Ç–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ", url="https://aur-ora.com/catalog/zdorove/641/"),  # –∑–∞–º–µ–Ω–∏—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
                    InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="prostuda_2")
                )
                await bot.send_photo(
                    chat_id=user_id,
                    photo="https://example.com/product3.jpg",  # –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É 3-–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
                    caption="3Ô∏è‚É£ –ü—Ä–∏–º–µ—Ä —Ç—Ä–µ—Ç—å–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞.",
                    reply_markup=markup
                )

        elif data in ["joints", "liver", "vitamins"]:
            await bot.send_message(user_id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {data}")

        await bot.answer_callback_query(callback_query.id)

    @dp.message_handler(lambda message: message.text and not message.text.startswith("/"))
    async def forward_user_message(message: types.Message):
        await bot.send_message(
            ADMIN_ID,
            f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{message.from_user.username or '–±–µ–∑ username'} (ID: {message.from_user.id}):\n\n{message.text}"
        )
        await message.reply("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")

    if __name__ == "__main__":
        executor.start_polling(dp, skip_updates=True)

else:
    print("‚ùå –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω –±–µ–∑ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ SSL. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ä–µ–¥—É —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π HTTPS.")
