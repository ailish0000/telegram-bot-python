# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω—É–∂–Ω—ã–µ –º–æ–¥—É–ª–∏ –∏–∑ aiogram
import os
import asyncio
from dotenv import load_dotenv

try:
    import ssl
    SSL_AVAILABLE = True
except ImportError:
    SSL_AVAILABLE = False
    print("‚ö†Ô∏è –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ SSL –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ë–æ—Ç –Ω–µ —Å–º–æ–∂–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å HTTPS-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.")

if SSL_AVAILABLE:
    from aiogram import Bot, Dispatcher, executor, types
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
    from aiogram.dispatcher.filters.state import State, StatesGroup
    from aiogram.contrib.fsm_storage.memory import MemoryStorage
    from aiogram.dispatcher import FSMContext

    load_dotenv()

    BOT_TOKEN = os.getenv("BOT_TOKEN")
    ADMIN_ID = int(os.getenv("ADMIN_ID"))

    bot = Bot(token=BOT_TOKEN)
    storage = MemoryStorage()
    dp = Dispatcher(bot, storage=storage)

    WELCOME_IMAGE = "https://github.com/user-attachments/assets/474d0575-01ed-45cc-8253-5e35bccda672"
    MENU_IMAGE = "https://github.com/user-attachments/assets/832593ee-2617-4ef6-9656-ff4d4f9506b8"

    user_started = set()

    # –•—Ä–∞–Ω–∏–ª–∏—â–µ –æ–±—Ä–∞—â–µ–Ω–∏–π: user_id -> —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    user_messages = {}

    class AdminReply(StatesGroup):
        waiting_for_reply = State()

    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    def main_menu():
        markup = InlineKeyboardMarkup(row_width=1)
        markup.add(
            InlineKeyboardButton("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è üíö", url="https://aur-ora.com/auth/registration/666282189484"),
            InlineKeyboardButton("1Ô∏è‚É£ –ü–æ–¥–±–æ—Ä–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤", callback_data="select_product"),
            InlineKeyboardButton("2Ô∏è‚É£ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="ask_question"),
            InlineKeyboardButton("3Ô∏è‚É£ –ö–∞—Ç–∞–ª–æ–≥ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤", callback_data="catalog"),
            InlineKeyboardButton("4Ô∏è‚É£ –ê–¥—Ä–µ—Å–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤", callback_data="check_city"),
            InlineKeyboardButton("–°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ ‚ùå", callback_data="report_error")
        )
        return markup

    # –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
    def product_menu():
        markup = InlineKeyboardMarkup(row_width=2)
        markup.add(
            InlineKeyboardButton("–û—Ç –ø—Ä–æ—Å—Ç—É–¥—ã", callback_data="prostuda"),
            InlineKeyboardButton("–í–æ–ª–æ—Å—ã/–Ω–æ–≥—Ç–∏", callback_data="hair"),
            InlineKeyboardButton("–î–ª—è —Å—É—Å—Ç–∞–≤–æ–≤", callback_data="joints"),
            InlineKeyboardButton("–î–ª—è –ø–µ—á–µ–Ω–∏", callback_data="liver"),
            InlineKeyboardButton("–í–∏—Ç–∞–º–∏–Ω—ã", callback_data="vitamins"),
            InlineKeyboardButton("–ê–Ω—Ç–∏–ø–∞—Ä–∞–∑–∏—Ç–∞—Ä–∫–∞", callback_data="antiparazit"),
            InlineKeyboardButton("–°–æ—Ä–±–µ–Ω—Ç—ã", callback_data="sorbent"),
            InlineKeyboardButton("–õ–∏—á–Ω—ã–π —Ç–æ–ø", callback_data="top"),
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
        )
        return markup

    # –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
    def city_menu():
        markup = InlineKeyboardMarkup(row_width=1)
        markup.add(
            InlineKeyboardButton("–ú–∏–Ω—Å–∫", callback_data="Minsk"),
            InlineKeyboardButton("–ú–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", callback_data="Minsk_region"),
            InlineKeyboardButton("–ì–æ–º–µ–ª—å", callback_data="Gomel"),
            InlineKeyboardButton("–ì–æ–º–µ–ª—å—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", callback_data="Gomel_region"),
            InlineKeyboardButton("–ë—Ä–µ—Å—Ç", callback_data="Brest"),
            InlineKeyboardButton("–ë—Ä–µ—Å—Ç—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", callback_data="Brest_region"),
            InlineKeyboardButton("–í–∏—Ç–µ–±—Å–∫", callback_data="Vitebsk"),
            InlineKeyboardButton("–í–∏—Ç–µ–±—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", callback_data="Vitebsk_region"),
            InlineKeyboardButton("–ú–æ–≥–∏–ª–µ–≤", callback_data="Mogilev"),
            InlineKeyboardButton("–ú–æ–≥–∏–ª–µ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", callback_data="Mogilev_region"),
            InlineKeyboardButton("–ù–µ—Ç –º–æ–µ–≥–æ –≥–æ—Ä–æ–¥–∞", callback_data="none_city"),
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
        )
        return markup

    async def delete_message_safe(chat_id, message_id):
        try:
            await bot.delete_message(chat_id, message_id)
        except:
            pass

    # --------------------- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ---------------------

    @dp.message_handler(commands=["start"])
    async def send_start(message: types.Message):
        user_id = message.from_user.id
        if user_id not in user_started:
            user_started.add(user_id)
            await bot.send_photo(
                chat_id=user_id,
                photo=WELCOME_IMAGE,
                caption="–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ù–∞—Ç–∞–ª—å—è –ö—É–º–∞—Å–∏–Ω—Å–∫–∞—è. –Ø –º–∞–º–∞ –¥–≤–æ–∏—Ö —Å—ã–Ω–æ–≤–µ–π –∏ –¥–∞–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑—É—é –ø—Ä–æ–¥—É–∫—Ü–∏—é –ê–≤—Ä–æ—Ä—ã. –•–æ—á—É –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –æ–ø—ã—Ç–æ–º –∏ –ø–æ–º–æ—á—å –≤—ã–±—Ä–∞—Ç—å —Ö–æ—Ä–æ—à–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã —ç—Ç–æ–π —Ñ–∏—Ä–º—ã"
            )
            await asyncio.sleep(6)
        await delete_message_safe(user_id, message.message_id)
        await bot.send_photo(
            chat_id=user_id,
            photo=MENU_IMAGE,
            caption="–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±–µ –ø–æ–¥—Ö–æ–¥–∏—Ç üëá",
            reply_markup=main_menu()
        )

    @dp.message_handler(commands=["menu"])
    async def send_menu(message: types.Message):
        user_id = message.from_user.id
        await delete_message_safe(user_id, message.message_id)
        await bot.send_photo(
            chat_id=user_id,
            photo=MENU_IMAGE,
            caption="–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±–µ –ø–æ–¥—Ö–æ–¥–∏—Ç üëá",
            reply_markup=main_menu()
        )

    @dp.message_handler(commands=["registration"])
    async def send_registration_link(message: types.Message):
        user_id = message.from_user.id
        await delete_message_safe(user_id, message.message_id)
        await message.answer("–°—Å—ã–ª–∫–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: https://aur-ora.com/auth/registration/666282189484")

    @dp.message_handler(commands=["catalog"])
    async def send_catalog_link(message: types.Message):
        user_id = message.from_user.id
        await delete_message_safe(user_id, message.message_id)
        await message.answer("–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ç–∞–ª–æ–≥: https://aur-ora.com/catalog/vse_produkty")

    @dp.callback_query_handler(lambda c: True)
    async def handle_callback(callback_query: types.CallbackQuery):
        data = callback_query.data
        user_id = callback_query.from_user.id
        message_id = callback_query.message.message_id

        await delete_message_safe(user_id, message_id)

        if data == "select_product":
            await bot.send_photo(
                chat_id=user_id,
                photo=MENU_IMAGE,
                caption="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–æ–¥—É–∫—Ç–∞:",
                reply_markup=product_menu()
            )

        elif data == "ask_question":
            await bot.send_message(user_id, "‚úâÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç, –∏ —è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—á—É.")

        elif data == "check_city":
            await bot.send_photo(
                chat_id=user_id,
                photo=MENU_IMAGE,
                caption="–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:",
                reply_markup=city_menu()
            )

        elif data == "back_to_main":
            await bot.send_photo(
                chat_id=user_id,
                photo=MENU_IMAGE,
                caption="–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±–µ –ø–æ–¥—Ö–æ–¥–∏—Ç üëá",
                reply_markup=main_menu()
            )

        elif data == "report_error":
            await bot.send_message(user_id, "‚ö†Ô∏è –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± –æ—à–∏–±–∫–µ, —á—Ç–æ–±—ã —è –º–æ–≥–ª–∞ –µ—ë –∏—Å–ø—Ä–∞–≤–∏—Ç—å.")

        elif data.startswith("prostuda"):
            step = data.replace("prostuda", "").strip("_") or "1"

            if step == "1":
                markup = InlineKeyboardMarkup(row_width=2)
                markup.add(
                    InlineKeyboardButton("–ß–∏—Ç–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ", url="https://aur-ora.com/catalog/zdorove/543/")
                )
                markup.add(
                    InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="select_product"),
                    InlineKeyboardButton("–î–∞–ª—å—à–µ ‚ñ∂Ô∏è", callback_data="prostuda_2")
                )
                await bot.send_photo(
                    chat_id=user_id,
                    photo="https://github.com/user-attachments/assets/ac7b0dcc-2786-4c3e-b2bb-49e2d5c5af64",
                    caption="1Ô∏è‚É£ –ê–Ω—Ç–∏–æ–∫—Å–∏–¥–∞–Ω—Ç –∏–∑ —Å–æ–∫–∞ –æ–±–ª–µ–ø–∏—Ö–∏. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–º–µ—Å—Ç–µ —Å —Å–æ–∫–æ–º —Å–≤–µ–∫–ª—ã –∏ —Å–µ—Ä–µ–±—Ä–æ–º",
                    reply_markup=markup
                )

            elif step == "2":
                markup = InlineKeyboardMarkup(row_width=2)
                markup.add(
                    InlineKeyboardButton("–ß–∏—Ç–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ", url="https://aur-ora.com/catalog/zdorove/641/")
                )
                markup.add(
                    InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="prostuda_1"),
                    InlineKeyboardButton("–î–∞–ª—å—à–µ ‚ñ∂Ô∏è", callback_data="prostuda_3")
                )
                await bot.send_photo(
                    chat_id=user_id,
                    photo="https://github.com/user-attachments/assets/2becd1b4-cb70-42d1-8052-c12d2a750fa1",
                    caption="2Ô∏è‚É£ –ê–Ω—Ç–∏–æ–∫—Å–∏–¥–∞–Ω—Ç –∏–∑ —Å–æ–∫–∞ —Å–≤–µ–∫–ª—ã. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–æ–≤–º–µ—Å—Ç–Ω–æ —Å –æ–±–ª–µ–ø–∏—Ö–æ–π –∏ —Å–µ—Ä–µ–±—Ä–æ–º",
                    reply_markup=markup
                )

            elif step == "3":
                markup = InlineKeyboardMarkup(row_width=2)
                markup.add(
                    InlineKeyboardButton("–ß–∏—Ç–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ", url="https://aur-ora.com/catalog/zdorove/7160/")
                )
                markup.add(
                    InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="prostuda_2"),
                    InlineKeyboardButton("–í –º–µ–Ω—é ‚ñ∂Ô∏è", callback_data="select_product")
                )
                await bot.send_photo(
                    chat_id=user_id,
                    photo="https://github.com/user-attachments/assets/01561f93-7dbd-46aa-a6a2-c0caaad30d68",
                    caption="3Ô∏è‚É£ –°–µ—Ä–µ–±—Ä–æ –∫–æ–ª–ª–æ–∏–¥–Ω–æ–µ ‚Äî —Å–∏–ª—å–Ω—ã–π –∞–Ω—Ç–∏—Å–µ–ø—Ç–∏–∫. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –±–æ—Ä—å–±—ã —Å –≤–∏—Ä—É—Å–∞–º–∏ –∏ –±–∞–∫—Ç–µ—Ä–∏—è–º–∏",
                    reply_markup=markup
                )

            else:
                await bot.send_message(user_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —à–∞–≥.")

        # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤

        elif data in ("Minsk", "Minsk_region", "Gomel", "Gomel_region", "Brest", "Brest_region",
                      "Vitebsk", "Vitebsk_region", "Mogilev", "Mogilev_region", "none_city"):
            city_urls = {
                "Minsk": "https://aur-ora.com/shop/minsk",
                "Minsk_region": "https://aur-ora.com/shop/minsk-region",
                "Gomel": "https://aur-ora.com/shop/gomel",
                "Gomel_region": "https://aur-ora.com/shop/gomel-region",
                "Brest": "https://aur-ora.com/shop/brest",
                "Brest_region": "https://aur-ora.com/shop/brest-region",
                "Vitebsk": "https://aur-ora.com/shop/vitebsk",
                "Vitebsk_region": "https://aur-ora.com/shop/vitebsk-region",
                "Mogilev": "https://aur-ora.com/shop/mogilev",
                "Mogilev_region": "https://aur-ora.com/shop/mogilev-region",
                "none_city": "https://aur-ora.com/shop",
            }
            url = city_urls.get(data, "https://aur-ora.com/shop")
            await bot.send_message(user_id, f"–°–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤ –≤ –≤–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ: {url}")

        else:
            await bot.send_message(user_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")

    # --------------------- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–ò ---------------------

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
    async def notify_admin_about_message(user_id, text):
        try:
            await bot.send_message(ADMIN_ID, f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:\n\n{text}")
        except Exception:
            pass

    @dp.message_handler(lambda message: message.text and not message.text.startswith("/"))
    async def handle_user_message(message: types.Message):
        user_id = message.from_user.id
        if user_id == ADMIN_ID:
            # –ê–¥–º–∏–Ω –ø–∏—à–µ—Ç –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –≤–Ω–µ FSM ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∑–¥–µ—Å—å
            return
        if user_id not in user_messages:
            user_messages[user_id] = []
        user_messages[user_id].append(message.text)
        await notify_admin_about_message(user_id, message.text)
        await message.reply("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")

    admin_menu = ReplyKeyboardMarkup(resize_keyboard=True).add(
        KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
        KeyboardButton("üí¨ –û–±—Ä–∞—â–µ–Ω–∏—è"),
        KeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞"),
        KeyboardButton("‚ùå –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏")
    )

    @dp.message_handler(lambda message: message.from_user.id == ADMIN_ID and message.text == "/admin")
    async def admin_start(message: types.Message):
        await message.answer("–í—ã –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=admin_menu)

    @dp.message_handler(lambda message: message.from_user.id == ADMIN_ID)
    async def admin_handler(message: types.Message, state: FSMContext):
        if message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
            total_users = len(user_messages)
            total_messages = sum(len(msgs) for msgs in user_messages.values())
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n–°–æ–æ–±—â–µ–Ω–∏–π: {total_messages}")

        elif message.text == "üí¨ –û–±—Ä–∞—â–µ–Ω–∏—è":
            if not user_messages:
                await message.answer("–û–±—Ä–∞—â–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.")
                return

            text = "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è:\n"
            # –ü–æ–∫–∞–∂–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Ö –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 3 —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            for user_id, msgs in list(user_messages.items())[-10:]:
                text += f"\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}:\n"
                for i, msg_text in enumerate(msgs[-3:], 1):
                    text += f"{i}. {msg_text}\n"
                text += f"‚û°Ô∏è /reply_{user_id} ‚Äî –û—Ç–≤–µ—Ç–∏—Ç—å —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n"
            await message.answer(text)

        elif message.text and message.text.startswith("/reply_"):
            try:
                user_id_to_reply = int(message.text.split("_")[1])
                await state.update_data(reply_to=user_id_to_reply)
                await AdminReply.waiting_for_reply.set()
                await message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_to_reply}:", reply_markup=ReplyKeyboardRemove())
            except Exception:
                await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

        elif message.text == "üì¢ –†–∞—Å—Å—ã–ª–∫–∞":
            await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:", reply_markup=ReplyKeyboardRemove())
            await AdminReply.waiting_for_reply.set()
            await state.update_data(reply_to="broadcast")

        elif message.text == "‚ùå –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏":
            await message.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.", reply_markup=ReplyKeyboardRemove())
            await state.finish()

        else:
            await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∞–¥–º–∏–Ω–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é.")

    @dp.message_handler(state=AdminReply.waiting_for_reply)
    async def process_admin_reply(message: types.Message, state: FSMContext):
        data = await state.get_data()
        reply_to = data.get("reply_to")
        text = message.text

        if reply_to == "broadcast":
            count = 0
            for user_id in user_messages.keys():
                try:
                    await bot.send_message(user_id, f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞:\n\n{text}")
                    count += 1
                except Exception:
                    pass
            await message.answer(f"–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
        else:
            try:
                await bot.send_message(reply_to, f"üí¨ –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{text}")
                await message.answer("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
            except Exception:
                await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        await state.finish()

    if __name__ == '__main__':
        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        executor.start_polling(dp, skip_updates=True)

else:
    print("SSL –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –±–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω.")

