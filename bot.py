# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω—É–∂–Ω—ã–µ –º–æ–¥—É–ª–∏ –∏–∑ aiogram
import os
import asyncio
from dotenv import load_dotenv  # –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env

try:
    import ssl
    SSL_AVAILABLE = True
except ImportError:
    SSL_AVAILABLE = False
    print("‚ö†Ô∏è –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ SSL –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ë–æ—Ç –Ω–µ —Å–º–æ–∂–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å HTTPS-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.")

if SSL_AVAILABLE:
    from aiogram import Bot, Dispatcher, executor, types
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

    load_dotenv()

    BOT_TOKEN = os.getenv("BOT_TOKEN")
    ADMIN_ID = int(os.getenv("ADMIN_ID"))

    bot = Bot(token=BOT_TOKEN)
    dp = Dispatcher(bot)

    WELCOME_IMAGE = "https://github.com/user-attachments/assets/474d0575-01ed-45cc-8253-5e35bccda672"
    MENU_IMAGE = "https://github.com/user-attachments/assets/832593ee-2617-4ef6-9656-ff4d4f9506b8"

    user_started = set()
    user_messages = []  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    def main_menu():
        markup = InlineKeyboardMarkup(row_width=1)
        markup.add(
            InlineKeyboardButton("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è üíö", url="https://aur-ora.com/auth/registration/666282189484"),
            InlineKeyboardButton("–ü–æ–¥–±–æ—Ä–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤", callback_data="select_product"),            
            InlineKeyboardButton("–ö–∞—Ç–∞–ª–æ–≥ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤", callback_data="catalog"),
            InlineKeyboardButton("–ê–¥—Ä–µ—Å–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤", callback_data="check_city"),
            InlineKeyboardButton("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="ask_question"),
            InlineKeyboardButton("–°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ ‚ùå", callback_data="report_error")
        )
        return markup

    def admin_menu():
        markup = InlineKeyboardMarkup(row_width=1)
        markup.add(
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
            InlineKeyboardButton("üí¨ –û–±—Ä–∞—â–µ–Ω–∏—è", callback_data="admin_messages"),
            InlineKeyboardButton("üì¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="admin_broadcast")
        )
        return markup

    def product_menu():
        markup = InlineKeyboardMarkup(row_width=2)
        markup.add(
            InlineKeyboardButton("–û—Ç –ø—Ä–æ—Å—Ç—É–¥—ã", callback_data="prostuda"),
            InlineKeyboardButton("–í–æ–ª–æ—Å—ã/–Ω–æ–≥—Ç–∏", callback_data="hair"),                     
            InlineKeyboardButton("–î–ª—è —Å—É—Å—Ç–∞–≤–æ–≤", callback_data="joints"),
            InlineKeyboardButton("–î–ª—è –ø–µ—á–µ–Ω–∏", callback_data="liver"),
            InlineKeyboardButton("–í–∏—Ç–∞–º–∏–Ω—ã", callback_data="vitamins"),
            InlineKeyboardButton("–ê–Ω—Ç–∏–ø–∞—Ä–∞–∑–∏—Ç–∞—Ä–∫–∞", callback_data="antiparazit"),
            InlineKeyboardButton("–°–æ—Ä–±–µ–Ω—Ç—ã", callback_data="sorbent"),               
            InlineKeyboardButton("–õ–∏—á–Ω—ã–π —Ç–æ–ø", callback_data="top"),               
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
        )
        return markup

    def city_menu():
        markup = InlineKeyboardMarkup(row_width=1)
        markup.add(           
            InlineKeyboardButton("–ú–∏–Ω—Å–∫", callback_data="Minsk"),
            InlineKeyboardButton("–ú–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", callback_data="Minsk_region"),            
            InlineKeyboardButton("–ì–æ–º–µ–ª—å", callback_data="Gomel"),
            InlineKeyboardButton("–ì–æ–º–µ–ª—å—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", callback_data="Gomel_region"),             
            InlineKeyboardButton("–ë—Ä–µ—Å—Ç", callback_data="Brest"),
            InlineKeyboardButton("–ë—Ä–µ—Å—Ç—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", callback_data="Brest_region"),             
            InlineKeyboardButton("–í–∏—Ç–µ–±—Å–∫", callback_data="Vitebsk"),
            InlineKeyboardButton("–í–∏—Ç–µ–±—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", callback_data="Vitebsk_region"),             
            InlineKeyboardButton("–ú–æ–≥–∏–ª–µ–≤", callback_data="Mogilev"),
            InlineKeyboardButton("–ú–æ–≥–∏–ª–µ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", callback_data="Mogilev_region"),             
            InlineKeyboardButton("–ù–µ—Ç –º–æ–µ–≥–æ –≥–æ—Ä–æ–¥–∞", callback_data="none_city"),
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
        )
        return markup

    async def delete_message_safe(chat_id, message_id):
        try:
            await bot.delete_message(chat_id, message_id)
        except:
            pass

    @dp.message_handler(commands=["start", "menu"])
    async def send_start(message: types.Message):
        user_id = message.from_user.id
        user_started.add(user_id)  # –ü—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await bot.send_photo(
            chat_id=user_id,
            photo=WELCOME_IMAGE,
            caption="–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ù–∞—Ç–∞–ª—å—è –ö—É–º–∞—Å–∏–Ω—Å–∫–∞—è. –Ø –º–∞–º–∞ –¥–≤–æ–∏—Ö —Å—ã–Ω–æ–≤–µ–π –∏ –¥–∞–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑—É—é –ø—Ä–æ–¥—É–∫—Ü–∏—é –ê–≤—Ä–æ—Ä—ã. –•–æ—á—É –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –æ–ø—ã—Ç–æ–º –∏ –ø–æ–º–æ—á—å –≤—ã–±—Ä–∞—Ç—å —Ö–æ—Ä–æ—à–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã —ç—Ç–æ–π —Ñ–∏—Ä–º—ã"
        )
        await asyncio.sleep(6)
        await delete_message_safe(user_id, message.message_id)
        await bot.send_photo(
            chat_id=user_id,
            photo=MENU_IMAGE,
            caption="–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±–µ –ø–æ–¥—Ö–æ–¥–∏—Ç üëá",
            reply_markup=main_menu()
        )

    @dp.message_handler(commands=["registration"])
    async def send_registration(message: types.Message):
        await message.answer("–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:", reply_markup=main_menu())

    @dp.message_handler(commands=["catalog"])
    async def send_catalog(message: types.Message):
        await message.answer("–ö–∞—Ç–∞–ª–æ–≥ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ —Å–∞–π—Ç–µ: https://aur-ora.com/catalog/")

    @dp.message_handler(commands=["admin"])
    async def show_admin_panel(message: types.Message):
        if message.from_user.id == ADMIN_ID:
            await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_menu())
        else:
            await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")

    @dp.callback_query_handler(lambda c: c.data.startswith("admin_"))
    async def handle_admin_actions(callback_query: types.CallbackQuery):
        data = callback_query.data
        user_id = callback_query.from_user.id
        if user_id != ADMIN_ID:
            await callback_query.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return

        if data == "admin_stats":
            await bot.send_message(user_id, f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(user_started)}\nüì® –û–±—Ä–∞—â–µ–Ω–∏–π: {len(user_messages)}")
        elif data == "admin_messages":
            if user_messages:
                for msg in user_messages[-10:]:
                    await bot.send_message(user_id, msg)
            else:
                await bot.send_message(user_id, "–ù–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏–π.")
        elif data == "admin_broadcast":
            await bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
            dp.register_message_handler(broadcast_message, state=None)

        await bot.answer_callback_query(callback_query.id)

    async def broadcast_message(message: types.Message):
        if message.from_user.id != ADMIN_ID:
            return
        count = 0
        for uid in user_started:
            try:
                await bot.send_message(uid, f"üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ù–∞—Ç–∞–ª—å–∏:\n\n{message.text}")
                count += 1
            except:
                continue
        await message.answer(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
        dp.unregister_message_handler(broadcast_message, state=None)

    @dp.callback_query_handler()
    async def handle_callbacks(callback_query: types.CallbackQuery):
        data = callback_query.data
        user_id = callback_query.from_user.id

        if data == "select_product":
            await bot.send_message(user_id, "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–æ–¥—É–∫—Ç–æ–≤:", reply_markup=product_menu())
        elif data == "ask_question":
            await bot.send_message(user_id, "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å! ")
        elif data == "catalog":
            await bot.send_message(user_id, "–ö–∞—Ç–∞–ª–æ–≥: https://aur-ora.com/catalog/")
        elif data == "check_city":
            await bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:", reply_markup=city_menu())
        elif data == "report_error":
            await bot.send_message(user_id, "–û–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—à–∏–±–∫—É ‚Äî —è –ø–µ—Ä–µ–¥–∞–º –µ—ë –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        elif data == "back_to_main":
            await bot.send_photo(
                chat_id=user_id,
                photo=MENU_IMAGE,
                caption="–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±–µ –ø–æ–¥—Ö–æ–¥–∏—Ç üëá",
                reply_markup=main_menu()
            )
        else:
            await bot.send_message(user_id, f"–í—ã –Ω–∞–∂–∞–ª–∏: {data}")

        await bot.answer_callback_query(callback_query.id)

    @dp.message_handler(lambda message: message.text and not message.text.startswith("/"))
    async def forward_user_message(message: types.Message):
        user_messages.append(f"üì© @{message.from_user.username or '–±–µ–∑ username'} (ID: {message.from_user.id}):\n{message.text}")
        await bot.send_message(ADMIN_ID, user_messages[-1])
        await message.reply("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")

    if __name__ == "__main__":
        executor.start_polling(dp, skip_updates=True)

else:
    print("‚ùå –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω –±–µ–∑ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ SSL. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ä–µ–¥—É —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π HTTPS.")
