from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import os
from dotenv import load_dotenv

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    markup = InlineKeyboardMarkup(row_width=2)
    markup.add(
        InlineKeyboardButton("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", url="https://aur-ora.com/auth/registration/666282189484"),
        InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–¥—Ä–µ—Å", callback_data="check_address"),
        InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç", callback_data="select_product")
    )
    return markup

# –ú–µ–Ω—é –ø—Ä–æ–¥—É–∫—Ç–æ–≤
def product_menu():
    markup = InlineKeyboardMarkup(row_width=2)
    markup.add(
        InlineKeyboardButton("–î–ª—è –≤–æ–ª–æ—Å", callback_data="hair"),
        InlineKeyboardButton("–î–ª—è —Å—É—Å—Ç–∞–≤–æ–≤", callback_data="joints"),
        InlineKeyboardButton("–î–ª—è –ø–µ—á–µ–Ω–∏", callback_data="liver"),
        InlineKeyboardButton("–í–∏—Ç–∞–º–∏–Ω—ã", callback_data="vitamins"),
        InlineKeyboardButton("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="ask_question"),
        InlineKeyboardButton("–°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ", callback_data="report_error")
    )
    return markup

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
@dp.message_handler(commands=["start", "menu"])
async def send_welcome(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±–µ –ø–æ–¥—Ö–æ–¥–∏—Ç üëá", reply_markup=main_menu())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
@dp.callback_query_handler(lambda c: True)
async def handle_callback(callback_query: types.CallbackQuery):
    data = callback_query.data
    user_id = callback_query.from_user.id
    message_id = callback_query.message.message_id

    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    await bot.edit_message_reply_markup(chat_id=user_id, message_id=message_id, reply_markup=None)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π
    if data == "check_address":
        await bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≥–æ—Ä–æ–¥:")

    elif data == "select_product":
        await bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–æ–¥—É–∫—Ç–∞:", reply_markup=product_menu())

    elif data == "ask_question":
        await bot.send_message(user_id, "‚úâÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç, –∏ —è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—á—É.")

    elif data == "report_error":
        await bot.send_message(user_id, "‚ö†Ô∏è –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± –æ—à–∏–±–∫–µ, —á—Ç–æ–±—ã —è –º–æ–≥–ª–∞ –µ—ë –∏—Å–ø—Ä–∞–≤–∏—Ç—å.")

    elif data in ["hair", "joints", "liver", "vitamins"]:
        await bot.send_message(user_id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {data}")

    await bot.answer_callback_query(callback_query.id)

# –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∞–¥–º–∏–Ω—É
@dp.message_handler(lambda message: message.text and not message.text.startswith("/"))
async def forward_user_message(message: types.Message):
    await bot.send_message(ADMIN_ID,
        f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{message.from_user.username or '–±–µ–∑ username'} (ID: {message.from_user.id}):\n\n{message.text}"
    )
    await message.reply("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
