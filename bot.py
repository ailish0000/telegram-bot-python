import os
import asyncio
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

try:
    import ssl
    SSL_AVAILABLE = True
except ImportError:
    SSL_AVAILABLE = False
    print("‚ö†Ô∏è –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ SSL –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ë–æ—Ç –Ω–µ —Å–º–æ–∂–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å HTTPS-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.")

if SSL_AVAILABLE:
    load_dotenv()

    BOT_TOKEN = os.getenv("BOT_TOKEN")
    ADMIN_ID = int(os.getenv("ADMIN_ID"))

    storage = MemoryStorage()
    bot = Bot(token=BOT_TOKEN)
    dp = Dispatcher(bot, storage=storage)

    WELCOME_IMAGE = "https://github.com/user-attachments/assets/474d0575-01ed-45cc-8253-5e35bccda672"
    MENU_IMAGE = "https://github.com/user-attachments/assets/832593ee-2617-4ef6-9656-ff4d4f9506b8"

    user_started = set()
    user_modes = {}
    admin_reply_sessions = {}
    broadcast_sessions = {}

    def main_menu():
        markup = InlineKeyboardMarkup(row_width=1)
        markup.add(
            InlineKeyboardButton("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è üíö", url="https://aur-ora.com/auth/registration/666282189484"),
            InlineKeyboardButton("–ü–æ–¥–±–æ—Ä–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤", callback_data="select_product"),
            InlineKeyboardButton("–ö–∞—Ç–∞–ª–æ–≥ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤", callback_data="catalog"),
            InlineKeyboardButton("–ê–¥—Ä–µ—Å–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤", callback_data="check_city"),
            InlineKeyboardButton("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="ask_question"),
            InlineKeyboardButton("–°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ ‚ùå", callback_data="report_error")
        )
        return markup

    def product_menu():
        markup = InlineKeyboardMarkup(row_width=2)
        markup.add(
            InlineKeyboardButton("–û—Ç –ø—Ä–æ—Å—Ç—É–¥—ã", callback_data="prostuda"),
            InlineKeyboardButton("–í–æ–ª–æ—Å—ã/–Ω–æ–≥—Ç–∏", callback_data="hair"),
            InlineKeyboardButton("–î–ª—è —Å—É—Å—Ç–∞–≤–æ–≤", callback_data="joints"),
            InlineKeyboardButton("–î–ª—è –ø–µ—á–µ–Ω–∏", callback_data="liver"),
            InlineKeyboardButton("–í–∏—Ç–∞–º–∏–Ω—ã", callback_data="vitamins"),
            InlineKeyboardButton("–ê–Ω—Ç–∏–ø–∞—Ä–∞–∑–∏—Ç–∞—Ä–∫–∞", callback_data="antiparazit"),
            InlineKeyboardButton("–°–æ—Ä–±–µ–Ω—Ç—ã", callback_data="sorbent"),
            InlineKeyboardButton("–ú–æ–∏ —Ñ–∞–≤–æ—Ä–∏—Ç—ã", callback_data="top"),
            InlineKeyboardButton("–î–µ—Ç–æ–∫—Å", callback_data="detox"),
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
        )
        return markup

    def city_menu():
        markup = InlineKeyboardMarkup(row_width=1)
        markup.add(
            InlineKeyboardButton("–ú–∏–Ω—Å–∫", callback_data="Minsk"),
            InlineKeyboardButton("–ú–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", callback_data="Minsk_region"),
            InlineKeyboardButton("–ì–æ–º–µ–ª—å", callback_data="Gomel"),
            InlineKeyboardButton("–ì–æ–º–µ–ª—å—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", callback_data="Gomel_region"),
            InlineKeyboardButton("–ë—Ä–µ—Å—Ç", callback_data="Brest"),
            InlineKeyboardButton("–ë—Ä–µ—Å—Ç—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", callback_data="Brest_region"),
            InlineKeyboardButton("–í–∏—Ç–µ–±—Å–∫", callback_data="Vitebsk"),
            InlineKeyboardButton("–í–∏—Ç–µ–±—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", callback_data="Vitebsk_region"),
            InlineKeyboardButton("–ú–æ–≥–∏–ª–µ–≤", callback_data="Mogilev"),
            InlineKeyboardButton("–ú–æ–≥–∏–ª–µ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", callback_data="Mogilev_region"),
            InlineKeyboardButton("–ù–µ—Ç –º–æ–µ–≥–æ –≥–æ—Ä–æ–¥–∞", callback_data="none_city"),
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
        )
        return markup

    async def delete_message_safe(chat_id, message_id):
        try:
            await bot.delete_message(chat_id, message_id)
        except:
            pass

    @dp.message_handler(commands=["start"])
    async def send_start(message: types.Message):
        user_id = message.from_user.id
        if user_id not in user_started:
            user_started.add(user_id)
            await bot.send_photo(
                chat_id=user_id,
                photo=WELCOME_IMAGE,
                caption="–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ù–∞—Ç–∞–ª—å—è –ö—É–º–∞—Å–∏–Ω—Å–∫–∞—è..."
            )
            await asyncio.sleep(6)
        await delete_message_safe(user_id, message.message_id)
        await bot.send_photo(
            chat_id=user_id,
            photo=MENU_IMAGE,
            caption="–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±–µ –ø–æ–¥—Ö–æ–¥–∏—Ç üëá",
            reply_markup=main_menu()
        )

    @dp.message_handler(commands=["menu"])
    async def send_menu(message: types.Message):
        await delete_message_safe(message.chat.id, message.message_id)
        await bot.send_photo(message.chat.id, MENU_IMAGE, caption="–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±–µ –ø–æ–¥—Ö–æ–¥–∏—Ç üëá", reply_markup=main_menu())

    @dp.message_handler(commands=["registration"])
    async def send_registration_link(message: types.Message):
        await delete_message_safe(message.chat.id, message.message_id)
        await message.answer("–°—Å—ã–ª–∫–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: https://aur-ora.com/auth/registration/666282189484")

    @dp.message_handler(commands=["catalog"])
    async def send_catalog_link(message: types.Message):
        await delete_message_safe(message.chat.id, message.message_id)
        await message.answer("–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ç–∞–ª–æ–≥: https://aur-ora.com/catalog/vse_produkty")

    # --- Admin Panel ---
    @dp.message_handler(commands=["stats"])
    async def stats(message: types.Message):
        if message.from_user.id != ADMIN_ID:
            return await message.reply("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        await message.reply(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(user_started)}")

    @dp.message_handler(commands=["broadcast"])
    async def start_broadcast(message: types.Message):
        if message.from_user.id != ADMIN_ID:
            return await message.reply("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        broadcast_sessions[ADMIN_ID] = True
        await message.reply("‚úâÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.")

    @dp.message_handler(lambda m: m.from_user.id == ADMIN_ID and m.text == "/cancel")
    async def cancel_broadcast(message: types.Message):
        if broadcast_sessions.pop(ADMIN_ID, None):
            await message.reply("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        else:
            await message.reply("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏.")

    @dp.message_handler(lambda m: m.from_user.id == ADMIN_ID and ADMIN_ID in broadcast_sessions)
    async def process_broadcast(message: types.Message):
        text = message.text
        broadcast_sessions.pop(ADMIN_ID, None)
        success = 0
        fail = 0
        for uid in user_started:
            try:
                await bot.send_message(uid, text)
                success += 1
            except:
                fail += 1
        await message.reply(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success}\n‚ùå –ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {fail}")

    # --- –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∑–¥–µ—Å—å ---

    if __name__ == "__main__":
        executor.start_polling(dp, skip_updates=True)

else:
    print("–ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω, —Ç.–∫. –Ω–µ—Ç SSL.")
