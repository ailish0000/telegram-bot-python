import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils import executor
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from collections import defaultdict
import os

logging.basicConfig(level=logging.INFO)

TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "123456789"))

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

stats = {
    "users": set(),
    "messages": defaultdict(int),
    "errors": 0
}

class UserMessageStates(StatesGroup):
    waiting_for_user_input = State()

main_menu = InlineKeyboardMarkup(row_width=2)
main_menu.add(
    InlineKeyboardButton("\ud83c\udfe3 \u041a\u0430\u0442\u0430\u043b\u043e\u0433 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438", callback_data="select_product"),
    InlineKeyboardButton("\u2753 \u0417\u0430\u0434\u0430\u0442\u044c \u0432\u043e\u043f\u0440\u043e\u0441", callback_data="ask_question"),
    InlineKeyboardButton("\u26a0\ufe0f \u0421\u043e\u043e\u0431\u0449\u0438\u0442\u044c \u043e\u0431 \u043e\u0448\u0438\u0431\u043a\u0435", callback_data="report_issue")
)

product_menu = InlineKeyboardMarkup(row_width=2)
product_menu.add(
    InlineKeyboardButton("\ud83e\udc8a \u041e\u0442 \u043f\u0440\u043e\u0441\u0442\u0443\u0434\u044b", callback_data="prostuda"),
    InlineKeyboardButton("\ud83d\udc87 \u0412\u043e\u043b\u043e\u0441\u044b / \u041d\u043e\u0433\u0442\u0438", callback_data="hair"),
    InlineKeyboardButton("\ud83e\uddb4 \u0421\u0443\u0441\u0442\u0430\u0432\u044b", callback_data="joints"),
    InlineKeyboardButton("\ud83e\udda0 \u041f\u0435\u0447\u0435\u043d\u044c", callback_data="liver"),
    InlineKeyboardButton("\ud83d\udc8a \u0412\u0438\u0442\u0430\u043c\u0438\u043d\u044b", callback_data="vitamins"),
    InlineKeyboardButton("\ud83e\uddec \u0410\u043d\u0442\u0438\u043f\u0430\u0440\u0430\u0437\u0438\u0442\u0430\u0440\u043a\u0430", callback_data="antiparazit"),
    InlineKeyboardButton("\ud83e\uddf9 \u0421\u043e\u0440\u0431\u0435\u043d\u0442\u044b", callback_data="sorbent"),
    InlineKeyboardButton("\ud83d\udd25 \u0425\u0438\u0442\u044b \u043f\u0440\u043e\u0434\u0430\u0436", callback_data="top"),
    InlineKeyboardButton("\ud83c\udf3f \u0414\u0435\u0442\u043e\u043a\u0441", callback_data="detox"),
    InlineKeyboardButton("\u21a9\ufe0f \u041d\u0430\u0437\u0430\u0434", callback_data="main_menu")
)

@dp.message_handler(commands=["start"])
async def start_handler(message: types.Message):
    user_id = message.from_user.id
    stats["users"].add(user_id)
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu)

@dp.callback_query_handler(lambda c: c.data in ["ask_question", "report_issue"])
async def handle_user_issue(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    issue_type = "–≤–æ–ø—Ä–æ—Å" if callback_query.data == "ask_question" else "–æ—à–∏–±–∫—É"
    await state.update_data(issue_type=issue_type, sender_id=user_id)
    await UserMessageStates.waiting_for_user_input.set()
    await bot.send_message(user_id, f"‚úçÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à {issue_type}, –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–ª—É—á–∏—Ç –µ–≥–æ.")
    await bot.answer_callback_query(callback_query.id)

@dp.message_handler(state=UserMessageStates.waiting_for_user_input)
async def forward_user_issue(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user_id = data.get("sender_id")
    issue_type = data.get("issue_type")

    if user_id and issue_type:
        await bot.send_message(
            ADMIN_ID,
            f"üì© –ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ:\n\n"
            f"–¢–∏–ø: {issue_type}\n"
            f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–µ:\n{message.text}",
            reply_markup=InlineKeyboardMarkup().add(
                InlineKeyboardButton("‚úâÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{user_id}")
            )
        )
        await message.reply("‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    else:
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    await state.finish()

@dp.callback_query_handler(lambda c: True)
async def callback_handler(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    data = callback_query.data
    stats["messages"][user_id] += 1

    try:
        if data == "main_menu":
            await bot.send_message(chat_id=user_id, text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu)

        elif data == "select_product":
            await bot.send_message(chat_id=user_id, text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=product_menu)

        elif data.split("_")[0] in ["prostuda", "hair", "joints", "liver", "vitamins", "antiparazit", "sorbent", "top", "detox"]:
            parts = data.split("_")
            prefix = parts[0]
            step = int(parts[1]) if len(parts) > 1 else 1

            messages = [
                ("https://github.com/user-attachments/assets/ac7b0dcc-2786-4c3e-b2bb-49e2d5c5af64", "1Ô∏è‚É£ ...", "https://aur-ora.com/catalog/zdorove/543/"),
                ("https://github.com/user-attachments/assets/2becd1b4-cb70-42d1-8052-c12d2a750fa1", "2Ô∏è‚É£ ...", "https://aur-ora.com/catalog/zdorove/641/"),
                ("https://github.com/user-attachments/assets/0d0ee28f-3110-4b2e-9f82-d20989091e0f", "3Ô∏è‚É£ ...", "https://aur-ora.com/catalog/zdorove/447/"),
                ("https://github.com/user-attachments/assets/89b794f8-7c3f-4d45-bc65-d980ba18fbeb", "4Ô∏è‚É£ ...", "https://aur-ora.com/catalog/vse_produkty/24839"),
                ("https://github.com/user-attachments/assets/6be0aed7-982b-4867-a039-4c7005743769", "5Ô∏è‚É£ ...", "https://aur-ora.com/catalog/vse_produkty/7347/")
            ]

            index = step - 1
            if 0 <= index < len(messages):
                markup = InlineKeyboardMarkup(row_width=2)
                markup.add(InlineKeyboardButton("–ß–∏—Ç–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ", url=messages[index][2]))

                nav_buttons = []
                if index > 0:
                    nav_buttons.append(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{prefix}_{index}"))
                if index < len(messages) - 1:
                    nav_buttons.append(InlineKeyboardButton("–î–∞–ª—å—à–µ ‚ñ∂Ô∏è", callback_data=f"{prefix}_{index + 2}"))
                if nav_buttons:
                    markup.add(*nav_buttons)
                markup.add(InlineKeyboardButton("‚Ü©Ô∏è –ö –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="select_product"))

                await bot.send_photo(
                    chat_id=user_id,
                    photo=messages[index][0],
                    caption=messages[index][1],
                    reply_markup=markup
                )

    except Exception as e:
        stats["errors"] += 1
        logging.exception("–û—à–∏–±–∫–∞ –≤ callback_handler")

if __name__ == "__main__":
    import admin
    executor.start_polling(dp, skip_updates=True)
